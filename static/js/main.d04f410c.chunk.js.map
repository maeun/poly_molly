{"version":3,"sources":["ImageUploader.js","App.js","index.js"],"names":["ImageUploader","imageSrc","setImageSrc","useState","frequency","setFrequency","triangleCount","setTriangleCount","canvasRef","useRef","cvLoaded","setCvLoaded","useEffect","async","window","cv","Promise","resolve","reject","script","document","createElement","src","onload","onerror","head","appendChild","loadOpenCV","handleImageLoad","img","Image","canvas","current","context","getContext","maxWidth","innerWidth","maxHeight","innerHeight","width","height","drawImage","detectPoints","console","error","imread","dst","Mat","cvtColor","COLOR_RGBA2GRAY","Canny","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","points","adjustedFrequency","i","size","contour","get","j","point","intPtr","push","delaunay","Delaunay","from","triangles","newPoints","length","p0","p1","p2","Math","abs","centerX","centerY","drawDelaunayTriangulation","delete","imgData","getImageData","data","idx","floor","r","g","b","beginPath","moveTo","lineTo","closePath","fillStyle","concat","fill","React","type","onChange","event","file","target","files","reader","FileReader","e","result","readAsDataURL","htmlFor","id","name","min","max","value","parseInt","ref","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d04f410c.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Delaunay } from \"d3-delaunay\";\r\n\r\nconst ImageUploader = () => {\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n  const [frequency, setFrequency] = useState(20); // 빈도를 조절하는 상태\r\n  const [triangleCount, setTriangleCount] = useState(0); // 삼각형 개수를 조절하는 상태\r\n  const imageRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [cvLoaded, setCvLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const loadOpenCV = async () => {\r\n      if (!window.cv) {\r\n        await new Promise((resolve, reject) => {\r\n          const script = document.createElement(\"script\");\r\n          script.src = \"https://docs.opencv.org/3.4/opencv.js\";\r\n          script.async = true;\r\n          script.onload = () => {\r\n            window.cv[\"onRuntimeInitialized\"] = () => {\r\n              setCvLoaded(true);\r\n            };\r\n            resolve();\r\n          };\r\n          script.onerror = reject;\r\n          document.head.appendChild(script);\r\n        });\r\n      } else {\r\n        setCvLoaded(true);\r\n      }\r\n    };\r\n\r\n    loadOpenCV();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (imageSrc && cvLoaded) {\r\n      handleImageLoad();\r\n    }\r\n  }, [frequency, imageSrc, cvLoaded]);\r\n\r\n  const handleImageUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      setImageSrc(e.target.result);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const handleImageLoad = () => {\r\n    const img = new Image();\r\n    img.src = imageSrc;\r\n    img.onload = () => {\r\n      const canvas = canvasRef.current;\r\n      const context = canvas.getContext(\"2d\");\r\n\r\n      // 브라우저 크기 가져오기\r\n      const maxWidth = window.innerWidth;\r\n      const maxHeight = window.innerHeight;\r\n\r\n      // 이미지의 해상도를 조정하여 브라우저 크기를 넘지 않게 설정\r\n      let width = img.width;\r\n      let height = img.height;\r\n\r\n      if (width > maxWidth) {\r\n        height = (maxWidth / width) * height;\r\n        width = maxWidth;\r\n      }\r\n\r\n      if (height > maxHeight) {\r\n        width = (maxHeight / height) * width;\r\n        height = maxHeight;\r\n      }\r\n\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      context.drawImage(img, 0, 0, width, height);\r\n\r\n      if (cvLoaded) {\r\n        detectPoints(canvas);\r\n      } else {\r\n        console.error(\"OpenCV is not loaded\");\r\n      }\r\n    };\r\n  };\r\n\r\n  const detectPoints = (canvas) => {\r\n    if (!window.cv) {\r\n      console.error(\"OpenCV is not loaded\");\r\n      return;\r\n    }\r\n\r\n    const src = window.cv.imread(canvas);\r\n    const dst = new window.cv.Mat();\r\n    window.cv.cvtColor(src, src, window.cv.COLOR_RGBA2GRAY, 0);\r\n\r\n    // Canny Edge Detection with adjusted thresholds\r\n    window.cv.Canny(src, dst, 100, 200, 3, false);\r\n\r\n    const contours = new window.cv.MatVector();\r\n    const hierarchy = new window.cv.Mat();\r\n    window.cv.findContours(\r\n      dst,\r\n      contours,\r\n      hierarchy,\r\n      window.cv.RETR_CCOMP,\r\n      window.cv.CHAIN_APPROX_SIMPLE\r\n    );\r\n\r\n    const points = [];\r\n    const adjustedFrequency = 55 - frequency; // 슬라이더 값을 빈도와 반비례로 설정\r\n    for (let i = 0; i < contours.size(); i++) {\r\n      const contour = contours.get(i);\r\n      for (let j = 0; j < contour.size().height; j += adjustedFrequency) {\r\n        // 빈도에 따라 점을 선택\r\n        const point = contour.intPtr(j);\r\n        points.push([point[0], point[1]]);\r\n      }\r\n    }\r\n\r\n    // Add the corners of the image\r\n    points.push([0, 0]);\r\n    points.push([canvas.width, 0]);\r\n    points.push([0, canvas.height]);\r\n    points.push([canvas.width, canvas.height]);\r\n\r\n    // 첫 번째 Delaunay 삼각 분할 수행\r\n    let delaunay = Delaunay.from(points);\r\n    let triangles = delaunay.triangles;\r\n\r\n    // 큰 삼각형을 나누기 위해 추가 점을 삽입\r\n    const newPoints = [...points];\r\n    for (let i = 0; i < triangles.length; i += 3) {\r\n      const p0 = points[triangles[i]];\r\n      const p1 = points[triangles[i + 1]];\r\n      const p2 = points[triangles[i + 2]];\r\n\r\n      const area = Math.abs(\r\n        (p0[0] * (p1[1] - p2[1]) +\r\n          p1[0] * (p2[1] - p0[1]) +\r\n          p2[0] * (p0[1] - p1[1])) /\r\n          2\r\n      );\r\n\r\n      if (area > 5000) {\r\n        // 넓은 삼각형에 대해 면적 임계값을 설정\r\n        const centerX = (p0[0] + p1[0] + p2[0]) / 3;\r\n        const centerY = (p0[1] + p1[1] + p2[1]) / 3;\r\n        newPoints.push([centerX, centerY]);\r\n      }\r\n    }\r\n\r\n    // 새로운 점으로 다시 Delaunay 삼각 분할 수행\r\n    delaunay = Delaunay.from(newPoints);\r\n    triangles = delaunay.triangles;\r\n\r\n    drawDelaunayTriangulation(canvas, newPoints, triangles);\r\n    src.delete();\r\n    dst.delete();\r\n    contours.delete();\r\n    hierarchy.delete();\r\n  };\r\n\r\n  const drawDelaunayTriangulation = (canvas, points, triangles) => {\r\n    const context = canvas.getContext(\"2d\");\r\n    const imgData = context.getImageData(\r\n      0,\r\n      0,\r\n      canvas.width,\r\n      canvas.height\r\n    ).data;\r\n\r\n    setTriangleCount(triangles.length / 3); // 삼각형 개수 업데이트\r\n\r\n    for (let i = 0; i < triangles.length; i += 3) {\r\n      const p0 = points[triangles[i]];\r\n      const p1 = points[triangles[i + 1]];\r\n      const p2 = points[triangles[i + 2]];\r\n\r\n      // 삼각형의 중심점 계산\r\n      const centerX = (p0[0] + p1[0] + p2[0]) / 3;\r\n      const centerY = (p0[1] + p1[1] + p2[1]) / 3;\r\n\r\n      // 중심점의 색상 추출\r\n      const idx =\r\n        (Math.floor(centerY) * canvas.width + Math.floor(centerX)) * 4;\r\n      const r = imgData[idx];\r\n      const g = imgData[idx + 1];\r\n      const b = imgData[idx + 2];\r\n\r\n      context.beginPath();\r\n      context.moveTo(p0[0], p0[1]);\r\n      context.lineTo(p1[0], p1[1]);\r\n      context.lineTo(p2[0], p2[1]);\r\n      context.closePath();\r\n\r\n      // 추출한 색상으로 삼각형 채우기\r\n      context.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n      context.fill();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleImageUpload} />\r\n      <div>\r\n        <label htmlFor=\"frequency\">Frequency:</label>\r\n        <input\r\n          type=\"range\"\r\n          id=\"frequency\"\r\n          name=\"frequency\"\r\n          min=\"5\"\r\n          max=\"50\"\r\n          value={frequency}\r\n          onChange={(e) => setFrequency(parseInt(e.target.value, 10))}\r\n        />\r\n      </div>\r\n      <div># of Triangles: {triangleCount}</div> {/* 삼각형 개수 표시 */}\r\n      {imageSrc && (\r\n        <div>\r\n          <canvas ref={canvasRef} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n","import React from \"react\";\nimport ImageUploader from \"./ImageUploader\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Poly Molly</h1>\n      <ImageUploader />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}